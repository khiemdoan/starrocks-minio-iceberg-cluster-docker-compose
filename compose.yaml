x-frontend-common: &frontend-common
  image: starrocks/fe-ubuntu:3.5-latest
  restart: unless-stopped
  user: 1000:1000
  command: /opt/starrocks/fe_entrypoint.sh leader
  environment:
    HOST_TYPE: FQDN
    FE_LEADER: leader
  healthcheck:
    test: curl -f -s -o /dev/null -w '%{http_code}' http://localhost:8030 | grep 401
    interval: 60s
    timeout: 1s
    retries: 3
    start_period: 1s
    start_interval: 1s
  depends_on:
    minio:
      condition: service_healthy

x-compute-common: &compute-common
  image: starrocks/cn-ubuntu:3.5-latest
  restart: unless-stopped
  user: 1000:1000
  command:
    - /bin/bash
    - -c
    - |
      /opt/starrocks/cn/bin/start_cn.sh
      tail -f /opt/starrocks/cn/log/*
  environment:
    FE_LEADER: leader
  ulimits:
    nproc: 65535
    nofile:
      soft: 655350
      hard: 655350
  healthcheck:
    test: curl -o /dev/null http://localhost:8060/health
    interval: 60s
    timeout: 1s
    retries: 3
    start_period: 1s
    start_interval: 1s

x-minio-common: &minio-common
  image: quay.io/minio/minio:RELEASE.2024-10-29T16-01-48Z
  restart: unless-stopped
  user: 1000:1000
  command: server --console-address ":9001" http://minio-{1...5}/data-{1...4}
  environment:
    MINIO_ROOT_USER: ${MINIO_USER}
    MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    MINIO_DOMAIN: minio
  healthcheck:
    test: curl -f http://localhost:9000/minio/health/live
    interval: 60s
    timeout: 1s
    retries: 3
    start_period: 1s
    start_interval: 1s

services:
  haproxy:
    image: docker.io/library/haproxy:3.2
    container_name: starrocks-haproxy
    restart: unless-stopped
    read_only: true
    volumes:
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    ports:
      - 9080:9080/tcp # status
      - 8030:8030/tcp # StarRocks FE HTTP
      - 8040:8040/tcp # StarRocks CN HTTP
      - 9030:9030/tcp # StarRocks Query
    healthcheck:
      test: timeout 1 bash -c '</dev/tcp/localhost/9080' || exit 1
      interval: 60s
      timeout: 1s
      retries: 3
      start_period: 1s
      start_interval: 1s
    depends_on:
      starrocks-leader:
        condition: service_healthy
      starrocks-follower-1:
        condition: service_healthy
      starrocks-follower-2:
        condition: service_healthy
      starrocks-follower-3:
        condition: service_healthy

  starrocks-leader:
    <<: *frontend-common
    container_name: starrocks-leader
    hostname: leader
    volumes:
      - .data/starrocks-fe-1:/opt/starrocks/fe/meta:Z

  starrocks-follower-1:
    <<: *frontend-common
    container_name: starrocks-follower-1
    hostname: follower-1
    volumes:
      - .data/starrocks-fe-2:/opt/starrocks/fe/meta:Z

  starrocks-follower-2:
    <<: *frontend-common
    container_name: starrocks-follower-2
    hostname: follower-2
    volumes:
      - .data/starrocks-fe-3:/opt/starrocks/fe/meta:Z

  starrocks-follower-3:
    <<: *frontend-common
    container_name: starrocks-follower-3
    hostname: follower-3
    volumes:
      - .data/starrocks-fe-4:/opt/starrocks/fe/meta:Z

  starrocks-cn-1:
    <<: *compute-common
    container_name: starrocks-cn-1
    hostname: cn-1
    volumes:
      - .data/starrocks-cn-1:/opt/starrocks/cn/storage:Z

  starrocks-cn-2:
    <<: *compute-common
    container_name: starrocks-cn-2
    hostname: cn-2
    volumes:
      - .data/starrocks-cn-2:/opt/starrocks/cn/storage:Z

  starrocks-cn-3:
    <<: *compute-common
    container_name: starrocks-cn-3
    hostname: cn-3
    volumes:
      - .data/starrocks-cn-3:/opt/starrocks/cn/storage:Z

  starrocks-cn-4:
    <<: *compute-common
    container_name: starrocks-cn-4
    hostname: cn-4
    volumes:
      - .data/starrocks-cn-4:/opt/starrocks/cn/storage:Z

  starrocks-cn-5:
    <<: *compute-common
    container_name: starrocks-cn-5
    hostname: cn-5
    volumes:
      - .data/starrocks-cn-5:/opt/starrocks/cn/storage:Z

  starrocks-cn-6:
    <<: *compute-common
    container_name: starrocks-cn-6
    hostname: cn-6
    volumes:
      - .data/starrocks-cn-6:/opt/starrocks/cn/storage:Z

  iceberg-rest:
    image: tabulario/iceberg-rest:1.6.0
    container_name: starrocks-iceberg-rest
    environment:
      CATALOG_URI: jdbc:postgresql://postgres:5432/iceberg
      CATALOG_JDBC_USER: iceberg
      CATALOG_JDBC_PASSWORD: ${POSTGRES_PASSWORD}
      AWS_ACCESS_KEY_ID: ${MINIO_ACCESS_KEY}
      AWS_SECRET_ACCESS_KEY: ${MINIO_SECRET_KEY}
      AWS_REGION: us-east-1
      CATALOG_WAREHOUSE: s3://warehouse/
      CATALOG_IO__IMPL: org.apache.iceberg.aws.s3.S3FileIO
      CATALOG_S3_ENDPOINT: http://minio:9000/
      CATALOG_S3_PATH__STYLE__ACCESS: true
    depends_on:
      postgres:
        condition: service_healthy
      minio-mc:
        condition: service_completed_successfully

  postgres:
    image: docker.io/library/postgres:17.6
    restart: unless-stopped
    container_name: starrocks-postgres
    environment:
      POSTGRES_USER: iceberg
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: iceberg
    volumes:
      - .data/postgres:/var/lib/postgresql/data:Z
    healthcheck:
      test: pg_isready -U iceberg -d iceberg
      interval: 60s
      timeout: 1s
      retries: 3
      start_period: 1s
      start_interval: 1s

  minio-mc:
    # This service is short lived, it does this:
    # - starts up
    # - checks to see if the MinIO service `minio` is ready
    # - creates a MinIO Access Key that the StarRocks services will use
    # - exits
    image: quay.io/minio/mc:RELEASE.2024-10-29T15-34-59Z
    entrypoint:
      - sh
      - -c
      - |
        mc config host add minio http://minio:9000 ${MINIO_USER} ${MINIO_PASSWORD}
        mc admin user svcacct add \
          --access-key ${MINIO_ACCESS_KEY} \
          --secret-key ${MINIO_SECRET_KEY} \
          minio ${MINIO_USER}
        mc mb -p minio/warehouse
    depends_on:
      minio:
        condition: service_healthy

  minio:
    image: docker.io/library/haproxy:3.2
    restart: unless-stopped
    container_name: starrocks-minio
    read_only: true
    volumes:
      - ./haproxy-minio/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
    ports:
      - 9000:9000/tcp
      - 9001:9001/tcp
    networks:
      default:
        aliases:
          - warehouse.minio
    depends_on:
      minio-1:
        condition: service_healthy
      minio-2:
        condition: service_healthy
      minio-3:
        condition: service_healthy
      minio-4:
        condition: service_healthy
      minio-5:
        condition: service_healthy
    healthcheck:
      test: timeout 1 bash -c '</dev/tcp/localhost/9080' || exit 1
      interval: 60s
      timeout: 1s
      retries: 3
      start_period: 1s
      start_interval: 1s


  minio-1:
    <<: *minio-common
    container_name: starrocks-minio-1
    volumes:
      - .data/minio-1-1:/data-1
      - .data/minio-1-2:/data-2
      - .data/minio-1-3:/data-3
      - .data/minio-1-4:/data-4

  minio-2:
    <<: *minio-common
    container_name: starrocks-minio-2
    volumes:
      - .data/minio-2-1:/data-1
      - .data/minio-2-2:/data-2
      - .data/minio-2-3:/data-3
      - .data/minio-2-4:/data-4

  minio-3:
    <<: *minio-common
    container_name: starrocks-minio-3
    volumes:
      - .data/minio-3-1:/data-1
      - .data/minio-3-2:/data-2
      - .data/minio-3-3:/data-3
      - .data/minio-3-4:/data-4

  minio-4:
    <<: *minio-common
    container_name: starrocks-minio-4
    volumes:
      - .data/minio-4-1:/data-1
      - .data/minio-4-2:/data-2
      - .data/minio-4-3:/data-3
      - .data/minio-4-4:/data-4

  minio-5:
    <<: *minio-common
    container_name: starrocks-minio-5
    volumes:
      - .data/minio-5-1:/data-1
      - .data/minio-5-2:/data-2
      - .data/minio-5-3:/data-3
      - .data/minio-5-4:/data-4
